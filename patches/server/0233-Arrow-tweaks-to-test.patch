From b2579aa25ad75e09a084a733a527ec2e925027a4 Mon Sep 17 00:00:00 2001
From: halfmaster1 <ohpointfive@gmail.com>
Date: Sun, 4 Sep 2022 03:07:02 -0400
Subject: [PATCH] Arrow tweaks to test


diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 45e79605..2b5334e4 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -121,6 +121,11 @@ public class EntityArrow extends Entity implements IProjectile {
         this.motX = d0;
         this.motY = d1;
         this.motZ = d2;
+
+        if (PaperSpigotConfig.changeClientArrows) {
+            this.alterArrowFlight();
+        }
+
         float f3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         this.lastYaw = this.yaw = (float) (MathHelper.b(d0, d2) * 180.0D / 3.1415927410125732D);
@@ -193,7 +198,7 @@ public class EntityArrow extends Entity implements IProjectile {
             for (j = 0; j < list.size(); ++j) {
                 Entity entity1 = (Entity) list.get(j);
 
-                if (entity1.ad() && (entity1 != this.shooter || this.as >= 5)) {
+                if (entity1.ad() && (entity1 != this.shooter || (PaperSpigotConfig.allowSelfShooting && this.as >= 5))) {
                     f1 = 0.3F;
                     AxisAlignedBB axisalignedbb1 = entity1.getBoundingBox().grow((double) f1, (double) f1, (double) f1);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb1.a(vec3d, vec3d1);
@@ -205,6 +210,11 @@ public class EntityArrow extends Entity implements IProjectile {
                             entity = entity1;
                             d0 = d1;
                         }
+                    } else if (PaperSpigotConfig.arrowInternalHitboxDetection) {
+                        if (axisalignedbb1.a(vec3d)) {
+                            entity = entity1;
+                            d0 = 0.0D;
+                        }
                     }
                 }
             }
@@ -393,6 +403,29 @@ public class EntityArrow extends Entity implements IProjectile {
         }
     }
 
+    public void alterArrowFlight() {
+        if (PaperSpigotConfig.preserveServerSideArrowTrajectory) {
+            this.motX *= PaperSpigotConfig.extraArrowClientFriction;
+            this.motY *= PaperSpigotConfig.extraArrowClientFriction;
+            this.motZ *= PaperSpigotConfig.extraArrowClientFriction;
+            this.motY -= PaperSpigotConfig.extraArrowClientGravity;
+        }
+
+        if (PaperSpigotConfig.arrowServersideRounding) {
+            this.locX = (double) MathHelper.floor(this.locX * 32.0D) / 32.0D;
+            this.locY = (double) MathHelper.floor(this.locY * 32.0D) / 32.0D;
+            this.locZ = (double) MathHelper.floor(this.locZ * 32.0D) / 32.0D;
+            this.motX = (double) ((int) (this.motX * 8000.0D)) / 8000.0D;
+            this.motY = (double) ((int) (this.motY * 8000.0D)) / 8000.0D;
+            this.motZ = (double) ((int) (this.motZ * 8000.0D)) / 8000.0D;
+        }
+
+        this.motX /= PaperSpigotConfig.extraArrowClientFriction;
+        this.motY /= PaperSpigotConfig.extraArrowClientFriction;
+        this.motZ /= PaperSpigotConfig.extraArrowClientFriction;
+        this.motY += PaperSpigotConfig.extraArrowClientGravity;
+    }
+
     public void b(NBTTagCompound nbttagcompound) {
         nbttagcompound.setShort("xTile", (short) this.d);
         nbttagcompound.setShort("yTile", (short) this.e);
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 97fbf0ea..05a488c8 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -12,6 +12,7 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
+import org.github.paperspigot.PaperSpigotConfig;
 
 // SportPaper start
 import java.util.ArrayList;
@@ -495,7 +496,7 @@ public class EntityTrackerEntry {
         } else if (this.tracker instanceof EntityArrow) {
             Entity entity = ((EntityArrow) this.tracker).shooter;
 
-            return new PacketPlayOutSpawnEntity(this.tracker, 60, entity != null ? entity.getId() : this.tracker.getId());
+            return new PacketPlayOutSpawnEntity(this.tracker, 60, entity != null ? entity.getId() : this.tracker.getId(), PaperSpigotConfig.changeClientArrows);
         } else if (this.tracker instanceof EntitySnowball) {
             return new PacketPlayOutSpawnEntity(this.tracker, 61);
         } else if (this.tracker instanceof EntityPotion) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
index 8a6accf5..79ae5f99 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
@@ -3,6 +3,8 @@ package net.minecraft.server;
 import java.io.IOException;
 import java.util.UUID;
 
+import org.github.paperspigot.PaperSpigotConfig;
+
 public class PacketPlayOutSpawnEntity implements Packet<PacketListenerPlayOut> {
 
     private int a;
@@ -85,6 +87,59 @@ public class PacketPlayOutSpawnEntity implements Packet<PacketListenerPlayOut> {
 
     }
 
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j, boolean alterArrowFlight) {
+        this.a = entity.getId();
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        this.h = MathHelper.d(entity.pitch * 256.0F / 360.0F);
+        this.i = MathHelper.d(entity.yaw * 256.0F / 360.0F);
+        this.j = i;
+        this.k = j;
+        if (j > 0) {
+            double d0 = entity.motX;
+            double d1 = entity.motY;
+            double d2 = entity.motZ;
+            double d3 = 3.9D;
+
+            if (d0 < -d3) {
+                d0 = -d3;
+            }
+
+            if (d1 < -d3) {
+                d1 = -d3;
+            }
+
+            if (d2 < -d3) {
+                d2 = -d3;
+            }
+
+            if (d0 > d3) {
+                d0 = d3;
+            }
+
+            if (d1 > d3) {
+                d1 = d3;
+            }
+
+            if (d2 > d3) {
+                d2 = d3;
+            }
+
+            if (alterArrowFlight) {
+                d0 *= PaperSpigotConfig.extraArrowClientFriction;
+                d1 *= PaperSpigotConfig.extraArrowClientFriction;
+                d2 *= PaperSpigotConfig.extraArrowClientFriction;
+                d1 -= PaperSpigotConfig.extraArrowClientGravity;
+            }
+
+            this.e = (int) (d0 * 8000.0D);
+            this.f = (int) (d1 * 8000.0D);
+            this.g = (int) (d2 * 8000.0D);
+        }
+
+    }
+
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.e();
         this.j = packetdataserializer.readByte();
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 89f3f150..127994c4 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -178,6 +178,41 @@ public class PaperSpigotConfig
         printArrowVelocity = getBoolean("settings.print-arrow-velocity", printArrowVelocity);
     }
 
+    public static boolean arrowInternalHitboxDetection = false;
+    private static void arrowInternalHitboxDetection() {
+        arrowInternalHitboxDetection = getBoolean("settings.arrow-internal-hitbox-detection", arrowInternalHitboxDetection);
+    }
+
+    public static boolean arrowServersideRounding = false;
+    private static void arrowServersideRounding() {
+        arrowServersideRounding = getBoolean("settings.arrow-server-side-rounding", arrowServersideRounding);
+    }
+
+    public static boolean preserveServerSideArrowTrajectory = false;
+    private static void preserveServerSideArrowTrajectory() {
+        preserveServerSideArrowTrajectory = getBoolean("settings.preserve-server-side-arrow-trajectory", preserveServerSideArrowTrajectory);
+    }
+
+    public static boolean changeClientArrows = false;
+    private static void changeClientArrows() {
+        changeClientArrows = getBoolean("settings.change-client-arrows", changeClientArrows);
+    }
+
+    public static boolean allowSelfShooting = true;
+    private static void allowSelfShooting() {
+        allowSelfShooting = getBoolean("settings.allow-self-shooting", allowSelfShooting);
+    }
+
+    public static double extraArrowClientFriction = 1.0D;
+    private static void extraArrowClientFriction() {
+        extraArrowClientFriction = getDouble("settings.extra-arrow-client-friction", extraArrowClientFriction);
+    }
+
+    public static double extraArrowClientGravity = 0.0D;
+    private static void extraArrowClientGravity() {
+        extraArrowClientGravity = getDouble("settings.extra-arrow-client-gravity", extraArrowClientGravity);
+    }
+
     public static boolean tickEmptyWorlds = true;
     private static void tickEmptyWorlds() {
         tickEmptyWorlds = getBoolean("settings.tick-empty-worlds", tickEmptyWorlds);
-- 
2.29.2

